// IIFE - IMMEDIATELY INVOKED FUNCTION EXPRESSION
// IT'S A MECHANISM WHERE YOU WANT TO CALL THE FUNCTION IMMEDIATELY AFTER FILE GET EXECUTE.
// IT CONTAINS TWO PARENTHESIS, FIRST ONE DEFINES THE BLOCK TO WRITE THE CODE, AND SECOND ONE IS FOR EXECUTION.

(() => {
    console.log(`first iife function`);    
})();

(() => {
    console.log(`second iife function`);
})()


// EXECUTION CONTEXT --> EC
// HOW JS ENGINE EXECUTES JS FILE.
// WE WILL BE HAVING THREE CONTEXTS, GLOBAL EC, FUNCTIONAL EC, EVAL EC.
// NO MATTER, EVEN IF YOU PRINT SIMPLE CONSOLE STATEMENT OR BUILD ENTERPRISE PROJECT, 
// GLOBAL CONTEXT IS CREATED FOR SURE, REGARDLESS OF THE PROJECT SCALE.
// EXECUTION HAPPENS IN TWO CYCLES - 1. MEMORY CREATION PHASE 2. EXECUTION PHASE.
// IN CREATION PHASE, MEMORY REQUIRED FOR THE DATA WILL BE CALCULATED.
// HOWEVER, AT THE TIME OF EXECUTION, MEMORY WILL BE ALLOCATED.
// AT EVERY FUNCTION CALL, NEW EXECUTION CONTEXT WILL BE CREATED, CONTAINS NEW VARIABLE ENV AND EXECUTION THREAD.
// AND EVERY FUNCTION GOES THROUGH CREATION AND EXECUTION PHASE.
// IF FUNCTION CALLS ANOTHER FUNCTION WITH IN IT, THE CALL STACK KEEPS TRACK OF THEIR ORDER TO EXECUTE.

// CONTROL FLOW STATEMENTS -- WHICH CONTROLS FLOW OF EXECUTION BASED ON CERTAIN CONDITIONS.
// TRUTHY N FALSY VALUES
// FALSY VALUES --> FALSE, 0, -0, BigInt 0n, "", null, undefined, NaN.
// rest all are regarded as truthy values, even the values like " ", "0", "false" etc/

// NULLISH COALESCING OPERATOR (??) USED FOR ASSIGNED FOR NON NULL VALUES AT THE TIME OF DATA FETCHING DATABASE ETC, 
// TO OVERCOME THE APPLICATION BREAK DUE TO NULL VALUES.
